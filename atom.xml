<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ctrl+Space</title>
  <subtitle>The Intellisense Every Programmer Needs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://controlspace.info/"/>
  <updated>2016-04-01T18:33:09.000Z</updated>
  <id>http://controlspace.info/</id>
  
  <author>
    <name>Buddha Jyothiprasad</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Disable DynAdmin authentication of Oracle Commerce</title>
    <link href="http://controlspace.info/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce/"/>
    <id>http://controlspace.info/2016/04/disable-dynadmin-auth-dev-env-oracle-commerce/</id>
    <published>2016-03-31T18:30:00.000Z</published>
    <updated>2016-04-01T18:33:09.000Z</updated>
    
    <content type="html">&lt;p&gt;We use Dyn/Admin for many of the development related tasks of Oracle Commerce(ATG). However, the log-in ticket expires too frequently forcing us to enter credentials repeatedly. Some times we will also have to give both application server(weblogic/jboss) credentials and dynamo administration credentials. As we are not in a production critical environment where multiple people may access our DynAdmin and create issues, it is not necessary to have this security check every time we try to open DynAdmin of our development environment. I have found following solutions to be free of this issue. This can come in handy when we are doing active development and have to frequently access dynamo administration.&lt;/p&gt;
&lt;h2 id=&quot;Solution-1-Enable-lazyAthentication&quot;&gt;&lt;a href=&quot;#Solution-1-Enable-lazyAthentication&quot; class=&quot;headerlink&quot; title=&quot;Solution 1 - Enable lazyAthentication&quot;&gt;&lt;/a&gt;Solution 1 - Enable lazyAthentication&lt;/h2&gt;&lt;p&gt;This approach works by enabling Lazy Athentication which means login will only be asked once per session. This means, as long as the session is not expired, dyn/admin will not ask for credentials again. &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;I have observed that this means a very long time. Sometimes even the the authentication credentials are not asked after restarting the server. Follow the below steps to enable lazyAthentication.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo&lt;/li&gt;
&lt;li&gt;Create a folder named servlet if it doesn’t already exist&lt;/li&gt;
&lt;li&gt;Create a folder named adminpipeline inside servlet folder if it doesn’t already exist&lt;/li&gt;
&lt;li&gt;Create a properties files with the name Authenticator.properties with below content in it and restart the server.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;atg/dynamo/servlet/adminpipeline/Authenticator.properties&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=atg.servlet.pipeline.UserAuthorityAuthenticator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$scope=global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lazyAthentication=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Solution-2-Disable-AuthenticationServlet&quot;&gt;&lt;a href=&quot;#Solution-2-Disable-AuthenticationServlet&quot; class=&quot;headerlink&quot; title=&quot;Solution 2 - Disable AuthenticationServlet&quot;&gt;&lt;/a&gt;Solution 2 - Disable AuthenticationServlet&lt;/h2&gt;&lt;p&gt;First solution provides respite from entering DynAdmin credentials frequently, however we still have to enter it once per session. Here is a better approach, my personal favourite. If we would like to disable the authentication for much longer period, we can disable authentication altogether, it can be acheived by disabling AuthenticationServlet component. Below approach can be followed for achieving that.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to %DYNAMO_HOME%/localconfig/atg/dynamo&lt;/li&gt;
&lt;li&gt;Create a folder named servlet if it doesn’t already exist&lt;/li&gt;
&lt;li&gt;Create a folder named adminpipeline inside servlet folder if it doesn’t already exist&lt;/li&gt;
&lt;li&gt;Create a properties files with the name AuthenticationServlet.properties with below content in it and restart the server.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;atg/dynamo/servlet/adminpipeline/AuthenticationServlet.properties&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=atg.servlet.pipeline.BasicAuthenticationPipelineServlet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enabled=&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Authentication can be enabled again by changing enabled=true in AuthenticationServlet.properties.&lt;/p&gt;
&lt;div class=&quot;admonition warning&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;Watchout&lt;/p&gt;&lt;p&gt;It is a good idea to disable lazyAthentication and enable AuthenticationServlet component when testing some authentication related tests. Neither of the approaches have been tested with LDAP or other authentication mechanisms.&lt;/p&gt;&lt;/div&gt;
</content>
    
    <summary type="html">
    
      Couple of handy dandy tricks for bypassing the authentication mechanism of Dyn Admin for a quick opening of it.
    
    </summary>
    
    
      <category term="atg" scheme="http://controlspace.info/tags/atg/"/>
    
      <category term="oraclecommerce" scheme="http://controlspace.info/tags/oraclecommerce/"/>
    
      <category term="configuration" scheme="http://controlspace.info/tags/configuration/"/>
    
      <category term="hack" scheme="http://controlspace.info/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>Open Source Patch Utility For Perforce</title>
    <link href="http://controlspace.info/2016/03/patch-utility-for-perforce/"/>
    <id>http://controlspace.info/2016/03/patch-utility-for-perforce/</id>
    <published>2016-03-07T18:30:00.000Z</published>
    <updated>2016-03-31T21:34:58.000Z</updated>
    
    <content type="html">&lt;p&gt;Perforce is a proprietary version controlling system. It has been around for more than 20 years. However, one glaring limitation always bugs the users. The inability to generate proper diff files.&lt;br&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1441/25563016955_8a691e760b_n.jpg&quot; alt=&quot;Where is my patch?&quot;&gt;&lt;br&gt;I can anticipate what is going on in your mind, we can generate a diff file by using the command line interface. &lt;code&gt;p4 diff&lt;/code&gt; helps us generate a diff file. However if you ever had a misfortune of trying to generate patch files on regular basis. You would understand the pain. It works fine as long as you just modify existing files. However, if you have new files added to the workspace to be checked into to the depot, you quickly run out of luck. One more problem is that you can’t control the files included in the diff file based on change list. It gives you diff file for all the files that are modified. Of course, you can give individual file names, but you have to repeat it either one by one or by using common wildcard. To overcome this, I have come up with a simple JavaFX utility.  Using this utility is as simple as it can get.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First step is to download the jar file. Click on the download button at the beginning or ending of the article. Just double click the jar file to run it.&lt;br&gt;&lt;div class=&quot;admonition warning&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;Watchout&lt;/p&gt;&lt;p&gt;You Need JRE 8 to run this without any additional configuration. If you are using JRE 7, please keep jfxrt.jar in class path or simply copy it to your jre/lib/ext folder. jfxrt.jar is available inside your {jre or jdk}/lib folder.&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Upon opening the application you will be presented with the login screen. Login with your regular perforce credentials, deselect Remember me, if you don’t want to store the data entered by you locally. By leaving the default value your credentials will be saved in the application cache so that you need not enter it again.&lt;br&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1626/25596793045_91c403dfd9_z.jpg&quot; alt=&quot;Login Pane&quot;&gt;&lt;/p&gt;
&lt;p&gt; If the login is successful, you will be taken to the next screen otherwise check the Log pane for error. Select the local perforce workspace name and the change list id and click Generate Patch button and save the file at your preferred location through the Save dialog which pops up.&lt;br&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1501/25229331639_f3324f01b4_z.jpg&quot; alt=&quot;Patch Generation Pane&quot;&gt;&lt;br&gt;&lt;div class=&quot;admonition info&quot;&gt;&lt;p class=&quot;admonition-title&quot;&gt;Note&lt;/p&gt;&lt;p&gt;You will be logged out upon closing the application automatically.You can download the utility as a runnable jar from the github repository folder.&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;You can find the project and its source in github. If you like the project, and want to contribute by adding more features, please fork the github repo. It is a maven project so building it is as quick as a wink.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Introduction to an opensource utility for generating patch files for pending changelists in perforce version controlling system
    
    </summary>
    
    
      <category term="java" scheme="http://controlspace.info/tags/java/"/>
    
      <category term="javafx" scheme="http://controlspace.info/tags/javafx/"/>
    
      <category term="opensource" scheme="http://controlspace.info/tags/opensource/"/>
    
      <category term="perforce" scheme="http://controlspace.info/tags/perforce/"/>
    
  </entry>
  
  <entry>
    <title>Hello World for Oracle Commerce (ATG)</title>
    <link href="http://controlspace.info/2016/03/hello-world-for-oracle-commerce/"/>
    <id>http://controlspace.info/2016/03/hello-world-for-oracle-commerce/</id>
    <published>2016-03-05T18:30:00.000Z</published>
    <updated>2016-03-31T18:51:10.000Z</updated>
    
    <content type="html">&lt;p&gt;There are so many concepts in Oracle Commerce (previously known as ATG), that makes coming up with Hello World program little difficult. Do you mean to create one JSP page and deploy it like commerce reference store? Do you want to create a component just to see in Dyn/Admin? Do you want to create a hello world repository? Depending on what you want to do, the approach to take will be different.&lt;br&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1633/25195316629_65c8162a37_n.jpg&quot; alt=&quot;Too many options to begin with&quot;&gt;&lt;br&gt;To work with Oracle Commerce, you don’t have to know about persisting data in database. If you approach Oracle Commerce programming with J2EE &amp;amp; MVC experience, you may find it little difficult to cope with it unless you start with a fresh mind, because things are very different in this platform.&lt;/p&gt;
&lt;p&gt;Today, I will demonstrate how to create a simple component so that it can be viewed in Dyn/Admin. Let us assume that you are trying to create it in your own module instead of existing module like DAS or DAF. Follow the the steps shown below.&lt;/p&gt;
&lt;h2 id=&quot;Step-1-Create-an-Eclipse-project&quot;&gt;&lt;a href=&quot;#Step-1-Create-an-Eclipse-project&quot; class=&quot;headerlink&quot; title=&quot;Step 1: Create an Eclipse project&quot;&gt;&lt;/a&gt;Step 1: Create an Eclipse project&lt;/h2&gt;&lt;p&gt;Create an Eclipse project and make sure you add all the necessary class files to the build path. Add classes.jar or DAS at the least.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://i.stack.imgur.com/OP8b7.png&quot; alt=&quot;Sample Eclipse Project Structure&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Step-2-Create-the-Java-Class&quot;&gt;&lt;a href=&quot;#Step-2-Create-the-Java-Class&quot; class=&quot;headerlink&quot; title=&quot;Step 2: Create the Java Class&quot;&gt;&lt;/a&gt;Step 2: Create the Java Class&lt;/h2&gt;&lt;p&gt;A component in Oracle Commerce is combination of two files. A Java Class and a Properties File. The Java class can be a simple bean or can be a service that performs several tasks based on a schedule. Simplest way to create the necessary Java class is to extend GenericService.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;HelloWorldComponent.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.buddha.components;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; atg.nucleus.GenericService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; atg.nucleus.ServiceException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorldComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GenericService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String firstStr = &lt;span class=&quot;string&quot;&gt;&quot;Dummy Value&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getFirstStr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; firstStr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setFirstStr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String firstStr)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstStr = firstStr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doStartService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ServiceException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.doStartService();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello ATG Component!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doStopService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ServiceException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.doStopService();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello ATG Component! Stops now!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Step-3-Create-the-properties-file&quot;&gt;&lt;a href=&quot;#Step-3-Create-the-properties-file&quot; class=&quot;headerlink&quot; title=&quot;Step 3: Create the properties file&quot;&gt;&lt;/a&gt;Step 3: Create the properties file&lt;/h2&gt;&lt;p&gt;The Properties file must be providing the values to the properties in the component. This initialises the bean. &lt;code&gt;$class&lt;/code&gt; property will link the property file with the class file we have created in previous step. Location of the propety file decides the path of the component instead of the java class. Follow the example below to create the property file.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;HelloWorldComponent.properties&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=com.buddha.components.HelloWorldComponent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;firstStr=HelloWorld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Multiple components can be created from the same class file. A different properties file can have same &lt;code&gt;$class&lt;/code&gt; but initialise firstStr to a different value. This creates a different component.&lt;/p&gt;
&lt;h2 id=&quot;Step-4-Create-a-Manifest-file&quot;&gt;&lt;a href=&quot;#Step-4-Create-a-Manifest-file&quot; class=&quot;headerlink&quot; title=&quot;Step 4: Create a Manifest file&quot;&gt;&lt;/a&gt;Step 4: Create a Manifest file&lt;/h2&gt;&lt;p&gt;Manifest files is like a configuration for the module. What all are its dependencies when it is running in webserver, where are the compiled classes placed etc.,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Manifest.MF&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Manifest-Version: 1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ATG-Required: DafEar.Admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ATG-Config-Path: config/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ATG-Class-Path: ./bin/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Step-5-Build-amp-Deploy&quot;&gt;&lt;a href=&quot;#Step-5-Build-amp-Deploy&quot; class=&quot;headerlink&quot; title=&quot;Step 5: Build &amp;amp; Deploy&quot;&gt;&lt;/a&gt;Step 5: Build &amp;amp; Deploy&lt;/h2&gt;&lt;p&gt;Build the project and copy the project folder into ${DYNAMO_ROOT} and run the following command to generate an ear file of your project and deploy it in your jboss server. No need to generate any ear file if you are running it on Tomcat. Just start the respective server with the given module.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;runAssembler.bat -jboss HelloWorld.ear -m EXP_HelloATGComponentWorld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Step-6-Access-the-Component&quot;&gt;&lt;a href=&quot;#Step-6-Access-the-Component&quot; class=&quot;headerlink&quot; title=&quot;Step 6: Access the Component&quot;&gt;&lt;/a&gt;Step 6: Access the Component&lt;/h2&gt;&lt;p&gt;Navigate to Dyn/Admin and search for the component HelloWorldComponent and click on the component listed in the search results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/urvDL.png&quot; alt=&quot;Search Results in DynAdmin&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on it to go to the component page to see the property we have created and its value given in properties file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/sWi9t.png&quot; alt=&quot;Component &amp;amp; the property we have created earlier&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see the server log to find a line similar to this.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO  [stdout] /dyn/admin/nucleus//com/buddha/components/HelloWorldComponent Hello ATG Component! Stops now!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This line is generated because of the sysout in our doStartService(); You can also give other methods that can be called through dyn/admin or interact with other components. However in production, avoid using System.out.println, instead use loggingDebug or loggingInfo. Best of Luck.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Oracle Commerce or ATG is an Ocean. Beginning it is so difficult. There are so many new things to learn before you can write a program that runs on this platform. This article helps you learn how to begin with creating new components in Oracle Commerce.
    
    </summary>
    
    
      <category term="atg" scheme="http://controlspace.info/tags/atg/"/>
    
      <category term="java" scheme="http://controlspace.info/tags/java/"/>
    
      <category term="oraclecommerce" scheme="http://controlspace.info/tags/oraclecommerce/"/>
    
  </entry>
  
</feed>
